akka {
  loggers = ["akka.event.Logging$DefaultLogger"]
  loglevel = "DEBUG"

  actor {
    provider = cluster
    allow-java-serialization = off
    serialization-bindings {
      "com.google.protobuf.GeneratedMessageV3" = proto
    }
    serializers {
      proto = "akka.remote.serialization.ProtobufSerializer"
    }
  }

  persistence.journal.plugin = "pg-journal"
  persistence.snapshot-store.plugin = "pg-snapshot"

  coordinated-shutdown.exit-jvm = on
  cluster.shutdown-after-unsuccessful-join-seed-nodes = 30s
remote {
      log-remote-lifecycle-events = on
      artery.canonical {
        hostname = "127.0.0.1"
        port = 2552
      }
    }

 cluster {
    seed-nodes = [
      "akka://employee-actor@127.0.0.1:2552"
    ]
    auto-down-unreachable-after = 10s
    sharding {
        remember-entities = on
        entity-recovery-strategy = "constant"
        entity-recovery-constant-rate-strategy {
        number-of-entities = 1
        frequency = 60000 ms
        }
      }
  }


  persistence.journal.plugin = "pg-journal"
  persistence.snapshot-store.plugin = "pg-snapshot"

  coordinated-shutdown.exit-jvm = on
  cluster.shutdown-after-unsuccessful-join-seed-nodes = 30s

  management {
    cluster.bootstrap {
      contact-point-discovery {
        # pick the discovery method you'd like to use:
        discovery-method = config
      }
    }
    http {
      port = 8558
      bind-hostname = "0.0.0.0"
    }
  }
}

pg-persistence {
  db {
    user = ${?POSTGRES_USER}
    password = ${?POSTGRES_PASSWORD}
    url = "jdbc:postgresql://localhost:5432/actor_snapshots_db"
  }
}
